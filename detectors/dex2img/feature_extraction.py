import os
import sys
import time
import warnings
import multiprocessing

from PIL import Image
import zipfile

import numpy as np

current_dir = os.path.dirname(os.path.realpath(__file__))

from sys import platform as _platform
from tools import progressbar_wrapper, utils

if _platform == "linux" or _platform == "linux2":
    TMP_DIR = '/tmp/'
elif _platform == "win32" or _platform == "win64":
    TMP_DIR = 'C:\\TEMP\\'


def feature_extraction(sample_dir, backup_path=None, proc_number=2):
    """
    extract rgb images for apks
    :param sample_dir: a folder contains apk files
    :param backup_path: save the meta-information into this path.
    :param proc_number: the number of core
    :return: a list of features correspond to the samples in the given path
    """
    if not isinstance(sample_dir, str) and not isinstance(sample_dir, list):
        MSG = "A directory or a list of path is allowed!"
        raise ValueError(MSG)

    if isinstance(sample_dir, str):
        if not os.path.exists(sample_dir):
            MSG = "No such directory or file {} exists!".format(sample_dir)
            raise ValueError(MSG)
        elif os.path.isfile(sample_dir):
            sample_path_list = [sample_dir]
        elif os.path.isdir(sample_dir):
            sample_path_list = list(utils.retrive_files_set(sample_dir, "", ".apk|"))
            assert len(sample_path_list) > 0, 'No files'
        else:
            raise ValueError(" No such path {}".format(sample_dir))

    if isinstance(sample_dir, list):
        sample_path_list = sample_dir

    if backup_path is None:
        backup_path = os.path.join(TMP_DIR, 'backup_imgs')
    utils.mkdir(backup_path)

    pool = multiprocessing.Pool(int(proc_number))
    pbar = progressbar_wrapper.ProgressBar()
    process_results = []
    tasks = []
    result_paths = []

    for i, apk_path in enumerate(sample_path_list):
        sample_name = os.path.splitext(os.path.basename(apk_path))[0]
        back_path_name = os.path.join(backup_path, sample_name + '.jpg')
        if os.path.exists(back_path_name):
            result_paths.append(back_path_name)
            continue
        tasks.append(apk_path)
        process_results = pool.apply_async(dex2img,
                                           args=(apk_path, back_path_name),
                                           callback=pbar.CallbackForProgressBar)

    pool.close()
    if process_results:
        pbar.DisplayProgressBar(process_results, len(tasks), type='hour')
    pool.join()

    for i, res in enumerate(pbar.TotalResults):
        status, res_path = res
        if status:
            result_paths.append(res_path)

    return result_paths


def dex2img(apk_path, save_path, num_channels = 3):
    """
    convert dex file to rbg images
    :param apk_path: an apk path
    :param save_path: a path for saving the resulting image
    :param num_channels: r, g, b channels
    :return: (status, save_path)
    """
    try:
        print("Processing " + apk_path)
        start_time = time.time()
        with zipfile.ZipFile(apk_path, 'r') as fh_apk:
            dex2num_list = []
            for name in fh_apk.namelist():
                if name.endswith('dex'):
                    with fh_apk.open(name, 'r') as fr:
                        hex_string = fr.read().hex()
                        dex2num = [int(hex_string[i:i+2], base=16) for i in \
                                   range(0, len(hex_string), 2)]
                        dex2num_list.extend(dex2num)

        # extend to three channels (e.g., r,g,b)
        num_appending_zero = num_channels - len(dex2num_list) % num_channels
        dex2num_list += [0] * num_appending_zero
        # shape: [3, -1]
        dex2array = np.array([dex2num_list[0::3], dex2num_list[1::3], dex2num_list[2::3]], dtype = np.uint8)
        # get image matrix
        from math import sqrt, ceil
        _length = int(pow(ceil(sqrt(dex2array.shape[1])), 2))
        if _length > dex2array.shape[1]:
            padding_zero = np.zeros((3, _length - dex2array.shape[1]), dtype = np.uint8)
            dex2array = np.concatenate([dex2array, padding_zero], axis = 1)
        dex2mat = np.reshape(dex2array, (-1, int(sqrt(_length)), int(sqrt(_length))))
        dex2mat_img = np.transpose(dex2mat, (1, 2, 0))
        img_handler = Image.fromarray(dex2mat_img)
        img_handler.save(save_path)
    except Exception as e:
        end_time = time.time()
        print("Fail to process " + apk_path + " during the time " + str(end_time - start_time))
        print(str(e))
        import traceback
        traceback.print_exc()
        return False, save_path
    else:
        end_time = time.time()
        print("Success to process " + apk_path + " during the time " + str(end_time - start_time))
        return True, save_path


def _main():
    apk_path = 'F:\\dataSet\\android\drebin\\benign_samples\\602ba18220f1f99df0fdf525435a4ceb552720fa8a102fa63c7fa538cb38abb1'
    feature_extraction(apk_path)


if __name__ == '__main__':
    sys.exit(_main())

