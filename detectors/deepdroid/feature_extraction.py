import os
import sys
import warnings
import multiprocessing

from androguard.misc import AnalyzeAPK
from tools import utils

current_dir = os.path.dirname(os.path.realpath(__file__))


def get_opcode_sequences(apk_path):
    _1, _2, dx = AnalyzeAPK(apk_path)

    opcode_chunks = []
    for method in dx.get_methods():
        if method.is_external():
            continue
        mth_body = method.get_method()
        sequence = []
        for ins in mth_body.get_instructions():
            opcode = ins.get_op_value()
            if opcode < 0 :
                opcode = 0
            elif opcode >= 256:
                opcode = 0
            else:
                opcode = opcode
            sequence.append(opcode) # list of 'int'
        if len(sequence) > 0:
            opcode_chunks.append(sequence)
    return opcode_chunks


def _feature_extr_wrapper(element):
    """
    A helper function to catch the exception
    :param element: argurments for feature extraction
    :return: features or Exception
    """
    try:
        return get_opcode_sequences(element)
    except Exception as e:
        return e


def feature_extraction(sample_path, proc_number=2):
    """
    extract opcode sequences
    :param sample_path_list: a list of sample paths
    :param proc_number: the number of processing threads
    :return: list of nested features, [[[opcode sequences of a method], [...], ...] ...]
    """
    if not isinstance(sample_path, str) and not isinstance(sample_path, list):
        MSG = "A directory or a list of path is allowed!"
        raise ValueError(MSG)

    if isinstance(sample_path, str):
        if not os.path.exists(sample_path):
            MSG = "No such directory or file {} exists!".format(sample_path)
            raise ValueError(MSG)
        elif os.path.isfile(sample_path):
            sample_paths = [sample_path]
        elif os.path.isdir(sample_path):
            sample_path_list = list(utils.retrive_files_set(sample_path, "", ".apk|"))
            assert len(sample_path_list) > 0, 'No files'
        else:
            raise ValueError(" No such path {}".format(sample_path))

    if isinstance(sample_path, list):
        sample_paths = sample_path

    # set up multiprocessing
    pool = multiprocessing.Pool(int(proc_number))

    feature_list = []
    for res, apk_path in zip(pool.imap(_feature_extr_wrapper, sample_paths), sample_paths):
        if isinstance(res, Exception):
            print(str(res))
            continue
        if len(res) <= 0:
            warnings.warn("Null opcode sequence for apk {}".format(apk_path))
            continue
        feature_list.append(res)
        MSG = 'Processing the apk {}: Successfully'
        print(MSG.format(apk_path))
    return feature_list

# def sequence_padding(feature_list, conv_win_size = 8, max_seq_length = 1000000):
#     """
#     padding no-op between methods
#     :param feature_list: a nested feature list: [[[opcode sequences of a method], [...], ...] ...]
#     :return: 2D numpy array with each row containing sequences of an APK
#     """
#     if len(feature_list) <= 0:
#         print("No sequences. Exit！")
#         sys.exit(-1)
#
#     raise NotImplementError
