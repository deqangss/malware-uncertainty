"""abstract class for malware detectors"""

from abc import ABCMeta, abstractclassmethod, abstractmethod
import warnings


class Detector(object):
    """Abstract base class is to organise a DL model."""
    __metaclss__ = ABCMeta

    def __init__(self, model_obj=None, hyper_parameters = None):
        """
        detector initialization
        :param model_obj: model class
        :param hyper_parameters: hyper-parameters
        """
        pass

    @abstractmethod
    def _data_preprocess(self, mal_sample_path=None, ben_sample_path=None):
        """feature extraction and feature preprocessing"""
        raise NotImplementedError

    @abstractmethod
    def _data_standardization(self, featureX, y, batch_size):
        """
        serialize the data to accommodate the data loader of tf.data.Dataset
        :param featureX: an array of features, each row represents an item of apk
        :param y: ground truth label
        :return: an object belongs to tf.data.Dataset
        """
        raise NotImplementedError

    @abstractmethod
    def train(self, mal_sample_path=None, ben_sample_path=None):
        """train the model
        :param mal_sample_path: a folder contains malicious applications
        :param ben_sample_path: a folder contains benign applications
        """
        raise NotImplementedError

    @abstractmethod
    def test(self, apk_paths=None, gt_labels=None):
        """
        return accuracy, f1 score, fpr, fnr, etc.
        :param apk_paths: a list of application paths
        :param gt_labels: ground truth labels
        :return:
        """
        raise NotImplementedError
