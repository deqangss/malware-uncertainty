"""Tests for malware-uncertainty.core.feature"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from absl.testing import absltest
from absl.testing import parameterized

import numpy as np

from core.feature.feature_extraction import DrebinFeature, \
    OpcodeSeq, MultiModality, DexToImage, APISequence
from config import config

# [DrebinFeature, OpcodeSeq, MultiModality, DexToImage, APISequence]
class MyTestCase(parameterized.TestCase):
    @parameterized.named_parameters(
        [("%s" % mtd_name,) + (mtd_name,) for mtd_name in [OpcodeSeq]])
    def test_feature_extraction(self, feature_type):
        malware_dir_name = config.get('dataset', 'malware_path')
        benware_dir_name = config.get('dataset', 'benware_path')
        naive_data_saving_dir = config.get('metadata', 'naive_data_directory')
        meta_data_saving_dir = config.get('metadata', 'meta_data_directory')
        feature_extractor = feature_type(naive_data_saving_dir, meta_data_saving_dir, update=False)
        malware_features = feature_extractor.feature_extraction(malware_dir_name)
        benign_features = feature_extractor.feature_extraction(benware_dir_name)
        features = malware_features + benign_features
        gt_labels = np.zeros((len(malware_features) + len(benign_features)), dtype=np.int32)
        gt_labels[:len(malware_features)] = 1
        feature_extractor.feature_preprocess(features, gt_labels)
        feature_extractor.feature2ipt(features)


if __name__ == '__main__':
    absltest.main()
