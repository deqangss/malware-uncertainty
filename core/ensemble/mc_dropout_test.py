from absl.testing import absltest
from absl.testing import parameterized
import tempfile

import numpy as np
import tensorflow as tf
from sklearn.datasets import load_breast_cancer

from core.ensemble.mc_dropout import MCDropout
from core.ensemble.dataset_lib import build_dataset_from_numerical_data


class MyTestCaseMCDropout(parameterized.TestCase):
    def setUp(self):
        self.x_np, self.y_np = load_breast_cancer(return_X_y=True)
        self.train_dataset_v1 = build_dataset_from_numerical_data((self.x_np, self.y_np))
        self.val_dataset_v1 = build_dataset_from_numerical_data((self.x_np, self.y_np))

    def test_dnn(self):
        with tempfile.TemporaryDirectory() as output_dir:
            mcdropout = MCDropout(architecture_type='dnn',
                                  model_directory=output_dir)
            mcdropout.fit(self.train_dataset_v1, self.val_dataset_v1, input_dim=self.x_np.shape[1])

            res = mcdropout.predict(self.x_np)
            self.assertEqual(mcdropout.get_n_members(), mcdropout.n_members)
            self.assertTrue(res.shape == (self.x_np.shape[0], mcdropout.hparam.n_sampling, 1))

            mcdropout.evaluate(self.x_np, self.y_np)

    def test_textcnn(self):
        with tempfile.TemporaryDirectory() as output_dir:
            mcdropout = MCDropout(architecture_type='text_cnn',
                                  model_directory=output_dir)
            x = np.random.randint(0, 256, (2, 10))
            y = np.random.choice(2, 2)
            train_dataset = build_dataset_from_numerical_data((x, y))
            val_dataset = build_dataset_from_numerical_data((x, y))
            mcdropout.fit(train_dataset, val_dataset)
            res = mcdropout.predict(x)
            self.assertTrue(res.shape == (x.shape[0], mcdropout.hparam.n_sampling, 1))
            mcdropout.evaluate(x, y)

    def test_multimodalitynn(self):
        with tempfile.TemporaryDirectory() as output_dir:
            mcdropout = MCDropout(architecture_type='multimodalitynn',
                                  model_directory=output_dir)
            x = [self.x_np] * 5
            train_data = build_dataset_from_numerical_data(tuple(x))
            train_y = build_dataset_from_numerical_data(self.y_np)
            train_dataset = tf.data.Dataset.zip((train_data, train_y))
            val_data = build_dataset_from_numerical_data(tuple(x))
            val_y = build_dataset_from_numerical_data(self.y_np)
            val_dataset = tf.data.Dataset.zip((val_data, val_y))
            mcdropout.fit(train_dataset, val_dataset, input_dim=[self.x_np.shape[1]] * 5)
            res = mcdropout.predict(x)
            self.assertTrue(res.shape == (self.x_np.shape[0], mcdropout.hparam.n_sampling, 1))
            mcdropout.evaluate(x, self.y_np)

    def test_r2d2(self):
        with tempfile.TemporaryDirectory() as output_dir:
            mcdropout = MCDropout(architecture_type='r2d2',
                                  model_directory=output_dir)
            x = np.random.uniform(0., 1., size=(10, 299, 299, 3))
            y = np.random.choice(2, 10)
            train_dataset = build_dataset_from_numerical_data((x, y))
            val_dataset = build_dataset_from_numerical_data((x, y))
            mcdropout.fit(train_dataset, val_dataset, input_dim=(299, 299, 3))
            res = mcdropout.predict(x)
            self.assertTrue(res.shape == (x.shape[0], mcdropout.hparam.n_sampling, 1))
            mcdropout.evaluate(x, y)

    def test_droidectc(self):
        with tempfile.TemporaryDirectory() as output_dir:
            mcdropout = MCDropout(architecture_type='droidectc',
                                  model_directory=output_dir)

            x = np.random.randint(0, 10000, size=(10, 1000))
            y = np.random.choice(2, 10)
            train_dataset = build_dataset_from_numerical_data((x, y))
            val_dataset = build_dataset_from_numerical_data((x, y))
            mcdropout.fit(train_dataset, val_dataset)
            res = mcdropout.predict(x)
            self.assertTrue(res.shape == (x.shape[0], mcdropout.hparam.n_sampling, 1))
            mcdropout.evaluate(x, y)


if __name__ == '__main__':
    absltest.main()
